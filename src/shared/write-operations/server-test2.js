import express from "express";
import axios from "axios";
import { wrapper } from "axios-cookiejar-support";
import { CookieJar } from "tough-cookie";
import FormData from "form-data";

const GRAPHIT_API_ENDPOINT = "https://graphit.ur.de/w/api.php";
// load credentails from .env or environment variables (e.g. specified in docker-compose.yml)
const credentails = {
    username: "Leonie",
    password: "graphIT-apfel1"
};

const title = "Test-Edit";

// --------- A Server for handling POST-Requests -------------------

// Init Server
const app = express();
const port = 3000;


// --------- Routes -----------------------------------------------

// gets ERROR: "permissiondenied"
/* The action you have requested is limited to users in the group: 
<a href="/w/index.php?title=Project:Users&amp;action=edit&amp;redlink=1" 
class="new" title="Project:Users (page does not exist)">Users</a>.'
*/
// https://graphit.ur.de/w/api.php?action=help&modules=edit 
app.get("/", async (req, res) => {
    const client = createAxiosInstance();
    console.log("client", client.status);
    // login
    await login(client);

    // create entry
    const createResult = await createWBEntryWithTitle(client, title);

    // logout
    await logout(client);

     // respond to request with result, return fitting HTTP reponse code depending on success
     createResult.success ? res.status(200).send(createResult) : res.status(500).send(createResult);
})



// set server to listen on specified port, log if successful
app.listen(port, () => {
    console.log(`Success! Your application is running on port ${port}`)
})


// -------- Functionality -----------------------------------------

/**
 * Create an Axios instance with cookie jar support (required to retain session data in Node)
 * @returns {AxiosInstance} Axios instance with cookie jar support
 */
function createAxiosInstance() {
    const jar = new CookieJar();
    return wrapper(axios.create({ jar }));
}

/**
 * Get a login token for the provided client's session
 * @param {AxiosInstance} client Axios instance generated by createAxiosInstance() 
 * @returns {string} The login token
 */
async function getLoginToken(client) {
    const response = await client.get(
        GRAPHIT_API_ENDPOINT + "?action=query&meta=tokens&type=login&format=json"
    );
    return response.data.query.tokens.logintoken;
}

/**
 * Get a login token and log the client in to GraphIT
 * @param {AxiosInstance} client Axios instance generated by createAxiosInstance() 
 * @returns {{loginToken: string, response: Object}} Object containing the login token and the login response data
 */
async function login(client) {
    const loginToken = await getLoginToken(client);

    const formData = new FormData();
    formData.append("lgname", credentails.username);
    formData.append("lgpassword", credentails.password);
    formData.append("lgtoken", loginToken);
    //const response = await client.post(GRAPHIT_API_ENDPOINT + "?action=login&format=json", formData);
    const response = await client.post(GRAPHIT_API_ENDPOINT + "?action=clientlogin&format=json", formData);
    console.log("Login:", response.data);
    return {
        loginToken: loginToken,
        response: response.data
    };
}

/**
 * Get a CRSF token for the provided client's session.
 * @param {AxiosInstance} client Axios instance generated by createAxiosInstance()
 * @returns {string} The CRSF token.
 */
async function getCsrfToken(client) {
    const response = await client.get(
        GRAPHIT_API_ENDPOINT + "?action=query&meta=tokens&type=csrf&format=json"
    );
    return response.data.query.tokens.csrftoken;
}

/**
 * Get a CSRF token and logout from the Mediawiki session.
 * @param {AxiosInstance} client Axios instance generated by createAxiosInstance()
 * @returns {{csrfToken: string, response: Object}} Object containing the csrfToken and logout response data.
 */
async function logout(client) {
    const csrfToken = await getCsrfToken(client);

    const formData = new FormData();
    formData.append("token", csrfToken);
    const response = await client.post(GRAPHIT_API_ENDPOINT + "?action=logout&format=json", formData);
    return {
        csrfToken: csrfToken,
        response: response.data
    };
}


/**
 * Get a CSRF token and create a new Wikibase item with the provided title
 * @param {AxiosInstance} client Axios instance generated by createAxiosInstance()
 * @param {string} title Desired German title of the item
 * @returns {Object} Object containing the create response data
 */
async function createWBEntryWithTitle(client, title) {
    const csrfToken = await getCsrfToken(client);

    const params = {
        action: "wbeditentity",
        format: "json",
        new: "item",
        data: `{"labels":{"de":{"language":"de","value":"${title}"}}}`,
    }
    const formData = new FormData();
    formData.append("token", csrfToken);
    const response = await client.post(GRAPHIT_API_ENDPOINT, formData, { params: params });
    return response.data;
}