import express from "express";
import axios from "axios";
import { wrapper } from "axios-cookiejar-support";
import { CookieJar } from "tough-cookie";
import FormData from "form-data";

// use dotenv to load environment variables from .env file if not in production
if (process.env.NODE_ENV !== "production") {
    const dotenv = await import("dotenv");
    dotenv.config();
}

// load credentails from .env or environment variables (e.g. specified in docker-compose.yml)
const credentails = {
    //username: process.env["GRAPHIT_ADMIN_BOT_USERNAME"],
    //password: process.env["GRAPHIT_ADMIN_BOT_PASSWORD"]
    username: "Leonie",
    password: "graphIT-apfel1"
};

// terminate if any credentials are missing
if (!credentails.username || !credentails.password) {
    console.error("Missing credentials, please set GRAPHIT_ADMIN_BOT_USERNAME and GRAPHIT_ADMIN_BOT_PASSWORD in .env (development) or in docker-compose.yml (production)");
    process.exit(9);
}

// create express app
const app = express();
const port = 3000;

const GRAPHIT_API_ENDPOINT = "https://graphit.ur.de/w/api.php";

// use JSON middleware, (if in production) publish public directory statically
app.use(express.json());
if (process.env.NODE_ENV === "production") app.use(express.static("public"));

// resolve POST request to create a new item
app.post("/api/create", async (req, res) => {
    const body = req.body;
    const title = body.title;
    console.log(`Received Create Request with title: ${title}`);

    const client = createAxiosInstance();

    // login
    await login(client);

    // create entry
    const createResult = await createWBEntryWithTitle(client, title);

    // logout
    await logout(client);

    // respond to request with result, return fitting HTTP reponse code depending on success
    createResult.success ? res.status(200).send(createResult) : res.status(500).send(createResult);

});

// resolve POST request to edit existing item
app.post("/api/edit", async (req, res) => {
    const body = req.body;
    const itemId = body.itemId,
        label = body.label,
        claimData = body.claimData;
    console.log(`Received Edit Request with itemId: ${itemId}, label: ${label}, claimData: ${claimData}`);

    const client = createAxiosInstance();

    // login
    await login(client);

    // edit entry
    const editResult = await editWBEntryWithId(client, itemId, label, claimData);

    // logout
    await logout(client);

    // respond to request with result, return fitting HTTP reponse code depending on success
    editResult.success ? res.status(200).send(editResult) : res.status(500).send(editResult);

});

// resolve POST request to delete existing item
app.post("/api/delete", async (req, res) => {
    const body = req.body;
    const pageId = body.pageId;
    console.log(`Received Delete Request with pageId: ${pageId}`);

    const client = createAxiosInstance();

    // login
    await login(client);

    // delete entry
    const deleteResult = await deleteWBEntryWithPageId(client, pageId);

    // logout
    await logout(client);

    // respond to request with result, return fitting HTTP reponse code depending on success
    deleteResult.delete ? res.status(200).send(deleteResult) : res.status(500).send(deleteResult);

});

// set server to listen on specified port, log if successful
app.listen(port, () => {
    console.log(`Express server listening at http://localhost:${port}`);
});

/**
 * Create an Axios instance with cookie jar support (required to retain session data in Node)
 * @returns {AxiosInstance} Axios instance with cookie jar support
 */
function createAxiosInstance() {
    const jar = new CookieJar();
    return wrapper(axios.create({ jar }));
}

/**
 * Get a login token for the provided client's session
 * @param {AxiosInstance} client Axios instance generated by createAxiosInstance() 
 * @returns {string} The login token
 */
async function getLoginToken(client) {
    const response = await client.get(
        GRAPHIT_API_ENDPOINT + "?action=query&meta=tokens&type=login&format=json"
    );
    return response.data.query.tokens.logintoken;
}

/**
 * Get a login token and log the client in to GraphIT
 * @param {AxiosInstance} client Axios instance generated by createAxiosInstance() 
 * @returns {{loginToken: string, response: Object}} Object containing the login token and the login response data
 */
async function login(client) {
    const loginToken = await getLoginToken(client);

    const formData = new FormData();
    formData.append("lgname", credentails.username);
    formData.append("lgpassword", credentails.password);
    formData.append("lgtoken", loginToken);
    const response = await client.post(GRAPHIT_API_ENDPOINT + "?action=login&format=json", formData);
    return {
        loginToken: loginToken,
        response: response.data
    };
}

/**
 * Get a CRSF token for the provided client's session.
 * @param {AxiosInstance} client Axios instance generated by createAxiosInstance()
 * @returns {string} The CRSF token.
 */
async function getCsrfToken(client) {
    const response = await client.get(
        GRAPHIT_API_ENDPOINT + "?action=query&meta=tokens&type=csrf&format=json"
    );
    return response.data.query.tokens.csrftoken;
}

/**
 * Get a CSRF token and create a new Wikibase item with the provided title
 * @param {AxiosInstance} client Axios instance generated by createAxiosInstance()
 * @param {string} title Desired German title of the item
 * @returns {Object} Object containing the create response data
 */
async function createWBEntryWithTitle(client, title) {
    const csrfToken = await getCsrfToken(client);

    const params = {
        action: "wbeditentity",
        format: "json",
        new: "item",
        data: `{"labels":{"de":{"language":"de","value":"${title}"}}}`,
    }
    const formData = new FormData();
    formData.append("token", csrfToken);
    const response = await client.post(GRAPHIT_API_ENDPOINT, formData, { params: params });
    return response.data;
}

/**
 * Get a CSRF token and edit the item with ID with the attached label and claim data
 * @param {AxiosInstance} client Axios instance generated by createAxiosInstance()
 * @param {string} itemId Item id of the Wikibase item to be edited
 * @param {string} label Desired German label of the item
 * @param {Object} claimData Client-generated object containing claim data (Wikibase statements)
 * @returns {Object} Object containing the edit response data
 */
async function editWBEntryWithId(client, itemId, label, claimData) {
    const csrfToken = await getCsrfToken(client);

    const data = {
        labels: {
            de: {
                language: "de",
                value: label
            }
        },
        claims: claimData
    }
    const params = {
        action: "wbeditentity",
        format: "json",
        id: itemId,
        data: JSON.stringify(data),
        clear: 1
    }
    const formData = new FormData();
    formData.append("token", csrfToken);
    const response = await client.post(GRAPHIT_API_ENDPOINT, formData, { params: params });
    return response.data;
}

/**
 * Get a CRSF token and delete the page with the corresponding ID.
 * @param {AxiosInstance} client Axios instance generated by createAxiosInstance()
 * @param {number} pageId Page id of the Mediawiki page to be deleted.
 * @returns {Object} Object containing the delete response data.
 */
async function deleteWBEntryWithPageId(client, pageId) {
    const csrfToken = await getCsrfToken(client);

    const params = {
        action: "delete",
        format: "json",
        pageid: pageId,
    }
    const formData = new FormData();
    formData.append("token", csrfToken);
    const response = await client.post(GRAPHIT_API_ENDPOINT, formData, { params: params });
    return response.data;
}

/**
 * Get a CSRF token and logout from the Mediawiki session.
 * @param {AxiosInstance} client Axios instance generated by createAxiosInstance()
 * @returns {{csrfToken: string, response: Object}} Object containing the csrfToken and logout response data.
 */
async function logout(client) {
    const csrfToken = await getCsrfToken(client);

    const formData = new FormData();
    formData.append("token", csrfToken);
    const response = await client.post(GRAPHIT_API_ENDPOINT + "?action=logout&format=json", formData);
    return {
        csrfToken: csrfToken,
        response: response.data
    };
}
